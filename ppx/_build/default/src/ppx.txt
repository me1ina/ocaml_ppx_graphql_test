DUNE PPX_REWRITER:
  (library
  (name SimplePpx)
  (wrapped false)
  (public_name SimplePpx.lib)
  (kind ppx_rewriter)
  (libraries ppxlib)
  )

DOUBLE:
  WITH STRING:
    open Ppxlib;

    let expander = (~ctxt, var) => {
      let loc = Expansion_context.Extension.extension_point_loc(ctxt);
      let doubleVar = var ++ var;
      Ast_builder.Default.estring(~loc, doubleVar);
    };
    let extension =
      Context_free.Rule.extension(
        Extension.V3.declare(
          "yay",
          Expression,
          Ast_pattern.(single_expr_payload(estring(__))),
          expander,
        ),
      );

    let () = Driver.register_transformation(~rules=[extension], "simple-ppx");


  WITH INT:
    open Ppxlib;

    let expander = (~ctxt, var) => {
      let loc = Expansion_context.Extension.extension_point_loc(ctxt);
      let doubleVar = Printf.sprintf("%i%i", var, var);
      Ast_builder.Default.estring(~loc, doubleVar);
    };
    let extension =
      Context_free.Rule.extension(
        Extension.V3.declare(
          "yay",
          Expression,
          Ast_pattern.(single_expr_payload(eint(__))),
          expander,
        ),
      );

    let () = Driver.register_transformation(~rules=[extension], "simple-ppx");



DUNE PPX_DERIVER:
  (library
  (name ppx_deriving_accessors)
  (public_name SimplePpx.lib)
  (kind ppx_deriver)
  (libraries ppxlib))


RECORD TO ACCESSOR IMPL & INTF
  open Ppxlib;
  module List = ListLabels;
  open Ast_builder.Default;

  let accessor_impl = (ld: label_declaration) => {
    let loc = ld.pld_loc;
    pstr_value(
      ~loc,
      Nonrecursive,
      [
        {
          pvb_pat: ppat_var(~loc, ld.pld_name),
          pvb_expr:
            pexp_fun(
              ~loc,
              Nolabel,
              None,
              ppat_var(~loc, {loc, txt: "x"}),
              pexp_field(
                ~loc,
                pexp_ident(~loc, {loc, txt: lident("x")}),
                {loc, txt: lident(ld.pld_name.txt)},
              ),
            ),
          pvb_attributes: [],
          pvb_loc: loc,
        },
      ],
    );
  };

  let accessor_intf = (~ptype_name, ld: label_declaration) => {
    let loc = ld.pld_loc;
    psig_value(
      ~loc,
      {
        pval_name: ld.pld_name,
        pval_type:
          ptyp_arrow(
            ~loc,
            Nolabel,
            ptyp_constr(~loc, {loc, txt: lident(ptype_name.txt)}, []),
            ld.pld_type,
          ),
        pval_attributes: [],
        pval_loc: loc,
        pval_prim: [],
      },
    );
  };

  let generate_impl = (~ctxt, (_rec_flag, type_declarations)) => {
    let loc = Expansion_context.Deriver.derived_item_loc(ctxt);
    List.concat_map(type_declarations, ~f=(td: type_declaration) =>
      switch (td) {
      | {ptype_kind: Ptype_abstract | Ptype_variant(_) | Ptype_open, _} =>
        Location.raise_errorf(
          ~loc,
          "Cannot derive accessors for non record types",
        )
      | {ptype_kind: Ptype_record(fields), _} =>
        List.map(fields, ~f=accessor_impl)
      }
    );
  };

  let generate_intf = (~ctxt, (_rec_flag, type_declarations)) => {
    let loc = Expansion_context.Deriver.derived_item_loc(ctxt);
    List.concat_map(type_declarations, ~f=(td: type_declaration) =>
      switch (td) {
      | {ptype_kind: Ptype_abstract | Ptype_variant(_) | Ptype_open, _} =>
        Location.raise_errorf(
          ~loc,
          "Cannot derive accessors for non record types",
        )
      | {ptype_kind: Ptype_record(fields), ptype_name, _} =>
        List.map(fields, ~f=accessor_intf(~ptype_name))
      }
    );
  };

  let impl_generator = Deriving.Generator.V2.make_noarg(generate_impl);

  let intf_generator = Deriving.Generator.V2.make_noarg(generate_intf);

  let my_deriver =
    Deriving.add(
      "accessors",
      ~str_type_decl=impl_generator,
      ~sig_type_decl=intf_generator,
    );

ALIAS STRUCTURE ITEM HELPER:
([%e
    eapply(
      ~loc,
      evar(~loc, "String.get"),
      [
        evar(~loc, type_name ++ "_gql"),
        eapply(
          ~loc,
          evar(~loc, "-"),
          [
            eapply(
              ~loc,
              evar(~loc, "int_of_string"),
              [
                eapply(
                  ~loc,
                  evar(~loc, "String.length"),
                  [
                    evar(~loc, type_name ++ "_gql")
                  ],
                )
              ],
            ), 
            eapply(
              ~loc,
              evar(~loc, "int_of_string"),
              [
                evar(~loc, "1")
              ],
            ) 
          ],
        ),
      ],
    ) 
  ] == '!') ? [%e
    eapply(
      ~loc,
      evar(~loc, "String.sub"),
      [
        evar(~loc, type_name ++ "_gql"),
        eapply(
          ~loc,
          evar(~loc, "int_of_string"),
          [
            estring(~loc, "0")
          ],
        ),
        eapply(
          ~loc,
          evar(~loc, "String.length"),
          [
            evar(~loc, type_name ++ "_gql")
          ],
        ),
      ],
    ) 
  ] : [%e evar(~loc, type_name ++ "_gql")] ++ [%e estring(~loc, "!")]; 
